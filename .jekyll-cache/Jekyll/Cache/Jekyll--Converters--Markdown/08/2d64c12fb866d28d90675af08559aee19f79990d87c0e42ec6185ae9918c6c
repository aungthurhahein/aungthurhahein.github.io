I"]<h2 id="there-is-a-shell-there-is-a-way">There is a shell, there is a way…</h2>
<p>This is the study notes about bash shell-scripting.
In part I, I would like to cover basic commands for starters.</p>

<h3 id="prelude">Prelude</h3>
<p>I have a memory shortage condition and this is just to warm up my scripting skills. Don’t expect to explain things. If you have strong imagination,that might works.</p>

<h3 id="some-env-setup">Some Env Setup</h3>

<h4 id="alias">alias</h4>
<p>create shortcut to save your fingers
{%highlight bash%}
$ alias l=’ls’
$ alias ll=’ls -l’
$ alias c=’cd’
$ alias cc=’cd ..’
{%endhighlight%}</p>

<h4 id="-set-completion-ignore-case-on">$ set completion-ignore-case On</h4>

<p>fuck the case-sensitive</p>

<h4 id="binbash">’#!/bin/bash’</h4>

<p>this ‘#i’ is called shebang. Declares that you are start banging with bash.</p>

<h3 id="variables">Variables</h3>
<h4 id="like-phpeverything-is-with--sign">like php,everything is with $ sign.</h4>
<p>{%highlight bash%}
 echo $PATH
 dir=${PWD##*/} //nowhitespace
 echo “The current working directory is $dir” 
{%endhighlight%}</p>

<h4 id="read-input">Read input</h4>
<p>sometimes,you want variables from outside world.
{%highlight bash%}
echo -n “Enter your name: “
read myvar
echo “myvar is $myvar”
{%endhighlight%}</p>

<h4 id="some-more-advanced-reading">Some more advanced reading</h4>
<p>this is for smarty pant.
{%highlight bash%}
 while read message
do
	 echo $message
	sleep 1
	 date
 done &lt; /etc/motd
{%endhighlight%}</p>

<h4 id="positional-parameters">Positional parameters</h4>
<p>if you know how to count one two and three,you can do it!</p>

<p>{%highlight bash%}
$ cat params.sh</p>

<p>#!/bin/bash
echo “My name is <code class="language-plaintext highlighter-rouge">basename $0</code> - I was called as $0”
echo “My first parameter is: $1”
echo “My second parameter is: $2”
//try it
$ ./params.sh one two
{%endhighlight%}</p>

<h4 id="small-bash-program">Small bash program</h4>

<p>This is a bash script that did something which makes sense.</p>

<p>#! /bin/sh</p>
<h1 id="calculate-the-length-of-the-hypotenuse-of-a-pythagorean-triangle">calculate the length of the hypotenuse of a Pythagorean triangle</h1>
<h1 id="using-hypotenuse2--adjacent2--opposite2">using hypotenuse^2 = adjacent^2 + opposite^2</h1>
<p>{%highlight bash%}
echo -n Enter the Adjacent length: 
read adjacent
echo -n Enter the Opposite length: 
read opposite
osquared=$(($opposite ** 2)) # get o^2
asquared=$(($adjacent ** 2)) # get a^2
hsquared=$(($osquered + $asquared)) # h^2 = a^2 + o^2
hypotenuse=<code class="language-plaintext highlighter-rouge">echo “scale=3;sqrt ($hsquared)” | bc</code> # bc does sqrt
echo “The Hypotenuse is $hypotenuse”
{%endhighlight%}</p>

<p>###Wildcards</p>

<p>####Globbing
It’s a term comes from global and it will searchs all trees from the whole forest.</p>

<p>{%highlight bash%}
ls A*
ls A??
ls *.txt
ls *.???
ls -ld /etc/rc{0,1,2,3,4,5,6}.d //create multiple file names rc0.d,rc1.d and so on
ls a[a-z]c.txt //list files name start with a and ends with c and any characters between a to z
{%endhighlight%}</p>

<h4 id="quoting">Quoting</h4>

<p>Not a big deal but minor issues are the thing that destory the most.
{%highlight bash%}
echo ‘<em>’
echo “</em>”
echo “this is a ‘<em>’”
echo ‘this is a “</em>”’
{%endhighlight%}</p>

:ET